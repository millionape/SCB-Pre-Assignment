openapi: "3.0.0"
info:
  description: "Bookstore RESTfull APIs"
  version: "1.0.0"
  title: "Ticket Management APIs"
  contact:
    email: "kittaporn.jp@gmail.com"
servers:
  - url: "http://localhost:3000"
    description: "Your local server"
tags:
- name: "Users"
  description: "All you can do with users is here!"
- name: "Authentication"
  description: "Handle all authentication stuff here!"
- name: "Books"
  description: "All you can do with books is here!"

paths:
  /users:
    get:
      tags:
      - "Users"
      summary: "Get logged in user information"
      description: "This api will return you a bunch of user personal information and user orders"
      operationId: "getUserInfo"
      security:
        - bearerAuth: []
      responses:
        200:
          description: The returned data of logged in user
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserInformation'
    post:
      tags:
      - "Users"
      summary: "Create new user"
      description: "This api will recieve user information and store it into database"
      operationId: "CreateUser"
      requestBody:
        $ref: "#/components/requestBodies/CreateUserDataBody"
      responses:
        200:
          description: OK
    delete:
      tags:
      - "Users"
      summary: "Delete user"
      description: "This api will delete current logged in user"
      operationId: "SeleteUser"
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
  /users/orders:
    post:
      tags:
      - "Users"
      summary: "Making an order"
      description: "This api will create a user's order"
      operationId: "CreateOrder"
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CreateOrderData"
      responses:
        200:
          description: OK
  /login:
    post:
      tags:
      - "Authentication"
      summary: "User login"
      description: "This api will authenticate the given username and password and the token will be appear in response header"
      operationId: "UserLogin"
      requestBody:
        $ref: "#/components/requestBodies/LoginDataBody"
      responses:
        200:
          description: OK
          headers:
            token:
              $ref: '#/components/headers/token'
  /logout:
    get:
      tags:
      - "Authentication"
      summary: "User logout"
      description: "This api will log the user off"
      operationId: "UserLogout"
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
  /books:
    get:
      tags:
      - "Books"
      summary: "Get all books"
      description: "This api will return you a list of all books"
      operationId: "GetBooks"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BooksData'
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT 
        description: "This will accept JWT token that generated from /login"
  headers:
    token:
      description: "Generated JWT token"
      schema:
        type: "string"
      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJib29rcyI6W10sIl9pZCI6IjYwMzY3MTE0YzBhNjQxMDJlYzZkNDA1MSIsInVzZXJuYW1lIjoiTWFya1dhaGxiZXJnIiwicGFzc3dvcmQiOiIkMmIkMTAkanBEd2lZMHJFLy5ZZThzUFFYU2tuTzJPRk5ZQkllREEvTGZBL0ZSSEw3U0IuN3ZNcHl1TEMiLCJuYW1lIjoiTWFyayIsInN1cm5hbWUiOiJXYWhsYmVyZyIsImRhdGVfb2ZfYmlydGgiOiIxOTk2LTA5LTIzIiwiX192IjowLCJpYXQiOjE2MTQxODA3NzgsImV4cCI6MTYxNDE4NDM3OH0.KCjJmGgdat_8mnMLQhAt2VKx-CCsYnSV1QtWMlRoV-g"
  requestBodies:
    CreateUserDataBody:
      description: "The required parameters to create a new user as following"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateUserData"
          example:
            username: "MarkWahlberg"
            password: "1212312121"
            name: "Mark"
            surname: "Wahlberg"
            date_of_birth: "1996-09-23"
    CreateOrderData:
      description: "The required parameters to create a new order as following"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderData"
          example:
            orders: [1,4]
    LoginDataBody:
      description: "The required parameters to log the user in as following"
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthData"
          example:
            username: "MarkWahlberg"
            password: "1212312121"
  schemas:
    CreateUserData:
      type: "object"
      properties:
        username:
          type: "string"
          example: "MarkWahlberg"
        password:
          type: "string"
          example: "1212312121"
        name:
          type: "string"
          example: "Mark"
        surname:
          type: "string"
          example: "Wahlberg"
        date_of_birth:
          type: "string"
          example: "1996-09-23"
    OrderData:
      type: "object"
      properties:
        orders:
          type: "array"
          description: "Accept array of book ids"
          items: 
            type: integer
            format: int64
    AuthData:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    BooksDataModel:
      type: "object"
      properties:
        id:
          type: "number"
        price:
          type: "number"
        book_name:
          type: "string"
        is_recommended: 
          type: "boolean"
          example: true
        author_name:
          type: "string"
    BooksData:
      type: "array"
      items:
        $ref: '#/components/schemas/BooksDataModel'
      example:
        - price: 495
          author_name: "Kristin Hannah"
          id: 4
          book_name: "The Great Alone: A Novel Kristin Hannah"
          is_recommended: true
        - price: 897.96
          author_name: "Gaz Oakley"
          id: 7
          book_name: "Vegan 100"
          is_recommended: false
    UserInformation:
      type: "object"
      properties:
        name:
          type: "string"
          example: "John"
        surname:
          type: "string"
          example: "Wahlberg"
        date_of_birth:
          type: "string"
          example: "1996-09-23"
        books:
          type: "array"
          items: 
            type: integer
            format: int64
          example: [1,4]